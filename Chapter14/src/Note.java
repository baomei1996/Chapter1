public class Note {
    /*

   1. 내부 클래스 요약


      종류         |  구현 위치                 |  사용할 수 있는 외부 클래스 변수       | 생성 방법

인스턴스 내부 클래스  | 외부 클래스 멤버 변수와 동일  | 외부 인스턴스 변수/ 외부 전역 변수      | 외부 클래스를 먼저 만든 후
                                                                                    내부 클래스 생성
정적 내부 클래스     | 외부 클래스 멤버 변수와 동일  |  외부 전역 변수                      | 외부 클래스와 무관하게 생성

지역 내부 클래스     | 메서드 내부에 구현           | 외부 인스턴스 변수/ 외부 전역 변수      | 메서드를 호출할 때 생성

익명 내부 클래스     | 메서드 내부에 구현           | 외부 인스턴스 변수/ 외부 전역 변수      | 메서드를 호출할 때 생성 되거나
                    변수에 대입하여 직접 구현                                            인터페이스 타입 변수에 대입할 때
                                                                                    new 예약어를 사용하여 생성

    2. 람다식(lambda expression)

    - 자바에서 함수형 프로그래밍 (functional programming) 을 구현하는 방식
    - 자바 8 부터 지원
    - 클래스를 생성하지 않고 함수의 호출만으로 기능을 수행
    - 함수형 프로그래밍
    - 순수 함수 (pure function) 을 구현하고 호출함으로써 외부 자료에 부수적인 영향울 주지 않고
      매개 변수만을 사용하도록 만든 함수
      함수를 기반으로 구현
      입력받은 자료를 기반으로 수행되고 외부에 영향을 미치지 않으므로 병렬처리등에 가능
      안정적인 확장성 있는 프로그래밍 방식

      3. 람다식 구현하기
      - 익명함수 만들기
      - 매개변수와 매개변수를 활용한 실행문으로 구현
      - 두 수를 입력 받아 더하는 add() 함수
      - 함수이름 반환 형을 없애고 -> 을 상용
      - {} 까지 실행문을 의미

      int add(int x, int y) {
      return x + y;                 →    (int x, int y) -> {return x + y;}
      }

      4. 람다식 문법
      - 매개변수 (하나인 경우) 자료형과 괄호 생략하기
       str -> {System.out.println(str);}
      - 매개변수가 두 개인 경우 괄호를 생략할 수 없음
      - 중괄호 안의 구현부가 한 문장인 경우 중괄호 생략
      - 즁괄호 안의 구현부가 한 문장이라도 return 문은 중괄호를 생략할 수 없음
      - 중괄호 안의 구현부가 반환문 하나라면 return 과 중괄호 모두 생략

      5. 스트림 (stream)
      - 자료의 대상과 관계없이 동일한 연산을 수행
        배열, 컬렉션을 대상으로 동일한 연산을 수행함
        일관성 있는 연산으로 자료의 처리를 쉽고 간단하게 함
      - 한 번 생성하고 사용한 스트림은 재사용 할 수 없음
        자료에 대한 스트림을 생성하여 연산을 수행하면 스트림은 소모됨
        다른 연산을 위해선느 새로운 스트림을 생성 함
      - 스트림 연산은 기존 자료를 변경하지 않음
        자료에 대한 스트림을 생성하면 별도의 메모리 공간을 사용하므로
        기존 자료를 변경하지 않음
      - 스트림 연산은 중간 연산과 최종 연산으로 구분 됨
        스트림에 대해 중간 연산은 여러 개 적용 될 수 있지만 최종 연산은 한 번만 적용 됨
        최종 연산이 호출되어야 중간 연산이 결과가 모두 적용됨
        이를 '자연연산' 이라 함

        6. reduce() 연산
        - 정의된 연산이 아닌 프로그래머가 직접 지정하는 연산을 적용
        - 최종 연산으로 스트림의 요소를 소모하여 연산수행
        - 배열의 모든 요소의 합을 구하는 reduce() 연산
        Arrays.stream(arr).reduce(0(초깃값), (a, b)(전달되는 요소) -> a + b(각 요소가 수행해야 할 기능))

        - 두 번째 요소로 전달되는 람다식에 따라 다양한 기능을 수행
     */
}
